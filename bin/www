#!/usr/bin/env node

/**
 * Module dependencies.
 */

// var app = require('../app');
const { serviceRegistry,setPort } = require('../serviceRegistry');
const debug = require('debug')('express:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */
/**
 * 设置默认端口号为3000
 */

process.env.PORT = 3000
Promise.all(Object.keys(serviceRegistry).map((serviceName) => {
  let message = ``
  try {
    const serverItem = serviceRegistry[serviceName]
    const { app } = serverItem
    let { port } = serverItem
    if ((!app) || (!app.set)) {
      throw new Error(`${serviceName}app不存在`)
    }
    if (!port) {
      port = process.env.PORT
      process.env.PORT += 1000
      setPort(serviceName,port)
    }
    const normalizeport = normalizePort(port);
    app.set('port', normalizeport);

    /**
     * Create HTTP server.
     */

    const server = http.createServer(app);
    /**
     * Listen on provided port, on all network interfaces.
     */
    message = `${serviceName}创建成功`
    server.listen(normalizeport);
    server.on('error', onError);
    server.on('listening', () => onListening(server));

  } catch (error) {
    console.error(serviceName, error)
    message = `${serviceName}报错`
  }
  return message
})).then((values) => {
  console.info(values);
})


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server) {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
